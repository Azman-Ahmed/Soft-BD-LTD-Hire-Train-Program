- Data Type
- Scope
- Global and Local Variable 
- Types of Functions
- Global and Local Scope
- Closure
- Hoisting
- Callback Function
- Promise
- Async Function
- Prototype
- Array Default Function (map, reduce, Filter etc)
- Regular Expression
- This

30th July, 2024

JS functions can take fucntion as a parameter and return function.

Variables:
Let 	-> 
Var 	->
const 	-> 

Data Types:

/*8 types of data types*/


CLOSURE:
/*
function closural (a, callback)
{
	a = a + 10;
	let val = callback(a);
	return val;
}
function b(a){
	return a * 10;
}

colsural(10, b);

*/

/*
function createArray(size)
{
	let arr = [];
	return function(){
		for(let i = 0; i < size; i++){
			arr.push(i);
		}
		return arr;
	}
}

let generateArray5 = createArray(5); //generateArray5 is a function type
let ourArr = generateArray5(); // ourArr is a Array type

let generateArray5 = createArray(100); //generateArray5 is a function type
let ourArr = generateArray5(); // ourArr is a Array type

let ourArr = createArray(200)(); //ourArr is an Array type
//This is called functional composition

*/

### 31st July, 2024

Resources: 
1. You Don't Know Js
2. Learning JavaScript Design Pattern by Addy Osmani

TASK: 
1. CREATE 5 SCENARIOS WITH CLOSURE AND SOLVE THEM
2. In How many ways we can create A object in JS

Call by Reference, Call by Value
In JS all the primitive data types follow Call by Value meaning that when we send it to a function a copy of the variable will be created and all the operations would be done on the copied variable. The main variable wont change.
All the other variable such as object, function, array, string follows call by reference meaning when a objective is sent in a function the reference of the object is sent.



Topics I learned: Data Type, Lexical Scoping & Global, Closure



### 7th August, 2024

Create an object by creating a class

///using a function as a construtor function:
function product(name, price, qty){
    this.name = name;
    this.price = price;
    this.qty = qty;
    
    
}

let p1 = new product("Laptop", 50000, 20);
console.log(p1.name, p1.price, p1.qty);

///
